const translitterate = require('data/translitterate.js');

describe('findNoVowel function', () => {
    it('should handle empty words', () => {
        const input = [[]];
        const expectedOutput = [[]];
        expect(translitterate.findNoVowel(input).toEqual(expectedOutput));
    });
    it('should separate two consonnants', () => {
        const input = [['c', 'c']];
        const expectedOutput = [['c', 'no_vowel', 'c']];
        expect(translitterate.findNoVowel(input)).toEqual(expectedOutput);
    });
    it('should not separate two vowels', () => {
        const input = [['v', 'v']];
        const expectedOutput = [['v', 'v']];
        expect(translitterate.findNoVowel(input)).toEqual(expectedOutput);
    });
    it('should not separate a consonnant and a vowel', () => {
        const input = [['c', 'v']];
        const expectedOutput = [['c', 'v']];
        expect(translitterate.findNoVowel(input)).toEqual(expectedOutput);
    });
    it('should not separate a vowel and a consonnant', () => {
        const input = [['v', 'c']];
        const expectedOutput = [['v', 'c']];
        expect(translitterate.findNoVowel(input)).toEqual(expectedOutput);
    });
    it('should not separate final consonnant', () => {
        const input = [['c', 'v', 'c', 'c']];
        const expectedOutput = [['c', 'v', 'c', 'c']];
        expect(translitterate.findNoVowel(input)).toEqual(expectedOutput);
    });
    it('should separate consonnants multiple times', () => {
        const input = [['c', 'c', 'c', 'c', 'c']];
        const expectedOutput = [['c', 'no_vowel', 'c', 'c', 'c', 'no_vowel', 'c']];
        expect(translitterate.findNoVowel(input)).toEqual(expectedOutput);
    });
});